<div>
    <h2>Getting Started with JSON Web Tokens (JWT)</h2>
        <p>A JSON web token is a way to transmit information between two parties in a secure and standardized way. The information is encoded in a JSON format and digitally signed with an encryption algorithm. JSON web tokens are used to authenticate users and verify their access privileges to protected resources.</p>
        <p>A JSON web token consists of three parts separated by dots: the header, the payload, and the signature. The header contains information about the token type and the encryption algorithm used. The payload contains the data that is to be transmitted, such as the identity of the user and their claims or claims. The signature is the result of applying an encryption function to the header and payload, along with a secret key known only to the parties involved.</p>
        <p>When a user logs in with her credentials, he is returned a JSON web token that he must save in his browser. Every time the user wants to access a protected route, she must send the JSON web token in the Authorization header with the Bearer scheme. The server checks the validity of the token and, if it is correct, allows access to the user. In this way, it is avoided having to save the user's session on the server or consult the database every time a resource is requested.</p>
        <p>JSON web tokens are a stateless form of authentication, as all the necessary information is contained in the token itself. This facilitates scalability and interoperability between different systems and domains.</p>
        <p>JWT is an open standard that defines a compact and secure way to transmit information between two parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWT can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA or ECDSA.</p>
        <p>JWT has the advantage of being smaller than SAML, since JSON is less verbose than XML and is encoded with fewer characters. This makes the JWT more suitable to be sent in HTML and HTTP environments.</p>
        <p>As for security, SWT can only be symmetrically signed by a shared secret using the HMAC algorithm. This means that the sender and receiver of the token must know the same secret, which can compromise confidentiality. JWT and SAML can also use a public/private key pair to sign tokens, allowing only the sender to have the private key and the receiver to verify the signature with the public key. Also, signing XML with XML Digital Signature is more complex and error prone than signing JSON.</p>
        <p>JSON parsers are common in most programming languages, since they map directly to objects. By contrast, XML does not have a natural document-to-object mapping. This makes JWT easier to work with than SAML assertions.</p>
        <p>Finally, JWT is widely used on the Internet, which shows its ease of client-side processing on multiple platforms, especially mobile. JWT is a good choice for implementing authorization and authentication in modern web applications.</p>
    <h3>Example code of JSON Web Tokens (JWT)</h3>
    <a href="./index.js" >Example</a>
</div>
<div>
    <h2>Develop, Debug, Learn? </h2>
        <p>Chris Heilmann talks about the evolution of web development from HTML to JavaScript and beyond. He shares his personal experience of being a web developer for 24 years and how they witnessed changes in technology and terminology. He also reflects on how JavaScript enabled web developers to create more interactive and dynamic websites but also led to some confusion and fragmentation in the field.</p>
        <p>Ajax and Comet are two technologies for building dynamic web applications with JavaScript. The author describes the process as simple, creative, and wonderful, but also admits that it was unprofessional and lacked proper debugging tools. The author also mentions how libraries like jQuery and in-browser development tools have made web development easier and more effective.</p>
        <p>The author reflects on the challenges of modern web development, where developers rely on many layers of abstraction and third-party code to build their products. The author questions whether this approach is sustainable and efficient and whether developers are losing touch with the platform itself.</p>
        <p>He criticizes the current state of the web and calls for a better focus on end users. The author argues that the web is down due to outdated code, inaccessible products, and slow browsers. He also proposes a solution: use a virtual DOM to improve performance and user experience. He emphasizes that web developers should be more concerned with the needs and challenges of their users, rather than chasing what's next.</p>
        <p>The speaker reflects on how web development has gone from being a geeky hobby to a mainstream profession. He argues that developers should be more patient and support each other as they face many challenges and expectations. He also reminds us that developers are people too and that most of them are friendly and likable.</p>
        <p>He expresses his frustration with the fast and shallow web development industry. They argue that web developers rely too heavily on frameworks and abstractions that hide the complexity and underlying challenges of web design. They suggest that web developers are missing out on learning and growth opportunities by not caring about performance, security, and accessibility.</p>
        <p>He shares his personal experience and opinions on how to improve the web. They criticize the excessive use of frameworks and node dependencies and advocate for simpler and more accessible web technologies. They also tell a story about fixing a typo on a website that required downloading 150MB of code.</p>
        <p>He criticizes the lack of creativity and innovation in the field and the reliance on tools and frameworks that obscure the underlying platform. He also laments the loss of the joy and curiosity that motivated web developers in the past. He suggests that web developers have too many options and too little focus, and should go back to the basics of CSS and JavaScript.</p>
        <p>He argues that current tools are mentally exhausting, time-consuming, and disconnected from learning and debugging. He proposes a vision of holistic developer tools that are lightweight, preconfigured, and open to feedback and contributions. He gives some examples of existing online tools that he likes.</p>
        <p>He describes the advantages of using Sass, a CSS preprocessor language that allows you to write less code and have more features. The text also mentions some online editors and frameworks that use Sass or JavaScript.</p>
        <p>He emphasizes the benefits of learning while developing web applications. He gives examples of how tools like Visual Studio Code can help developers improve their skills and avoid mistakes. He also explains some common web development challenges such as accessibility, performance, and cross-browser compatibility.</p>
        <p>He describes how to use a browser with no interface to preview and debug CSS in an editor. He also mentions a Python environment that pulls code from GitHub and auto-completes it as you type.</p>
        <p>He discusses how Python can be turned into a written language with a tool called Pyright. He admits that he doesn't have a clear vision of the future of this technology, but he encourages an open and collaborative approach. He also expresses his enthusiasm for automation and making development more accessible and educational for everyone.</p>
</div>
