<div>
    <h2>An Introduction to Functions, Execution Context and the Call Stack</h2>

        <p>To run our code, JavaScript parses it, which means it reads and interprets each word and symbol. It uses them as instructions to tell our browser what to do. For example, when it sees a function declaration, it stores it in memory. When it sees a function invocation, it creates a new execution context for that function. An execution context consists of two components: memory and thread of execution. Memory is where we store data, such as variables and functions. The thread of execution is where we keep track of where we are in the code. We can have multiple execution contexts at the same time, and JavaScript uses the call stack to manage them. The call stack is a data structure that works like a stack of books: the last one in is the first one out. Whenever we invoke a function, we push its execution context to the top of the call stack. Whenever we return from a function, we pop its execution context from the top of the call stack. This way, we always know which execution context is currently running.</p>
        <p>This video explains the basics of how JavaScript works when executing code. The concept of an execution context is introduced, which consists of an execution thread that goes through the code line by line and a memory that stores the declared variables and functions. A distinction is made between the global execution context, which is created when the application starts and contains the elements available throughout the code, and the function execution context, which is created when a function is called and contains the local elements of that function. The term global variable environment is used to refer to global memory, and it is emphasized that JavaScript is synchronous and single-threaded, meaning it executes one thing at a time in order. The video is intended to lay the foundation for understanding the difficult parts of JavaScript that will come later.</p>
        <p>The call stack is a mechanism for an interpreter (such as the JavaScript interpreter in a web browser) to keep track of where various functions are called, what function is currently executing, and what functions are called from that function, etc. a dynamic LIFO data structure that stores information about an application's subroutines. Think of it as the place for function calls, or a data structure that implements the stack data type, in which only one function can be executed at a time.</p>
        <p>A LIFO data structure is an ordered data structure that stores and manipulates data elements on the last-in, first-out principle It has a limited capacity and two main operations: push and pull, which are used to add and remove elements respectively1 A stack can be implemented using an array or a linked list</p>

        
    <h3>Execution Context</h3>

        <p>In JavaScript, an execution context is an abstract concept of an environment where the JavaScript code is executed. It can be thought of as a large container that can be used to hold or load things in and process. Within the large container are other smaller containers. The first execution context is created when the JavaScript engines run your code. The JavaScript engine creates a new execution context before any code is executed, and this new execution context is called the global execution context. The global execution context is the default execution context that is created by the JavaScript engine.</p>
        
    <h3>Call stack</h3>

        <p>A call stack is a mechanism for an interpreter (such as the JavaScript interpreter in a web browser) to keep track of its place in a script that calls multiple functions: which function is currently being executed, and which functions are being called from within. of that function, etc..</p>
        <p>When a script calls a function, the interpreter adds it to the call stack and then starts executing the function.</p>
        <p>All functions called by that function are added to the call stack higher up and are executed where their calls are reached.</p>
        <p>When the current function ends, the interpreter pops it off the stack and resumes execution where it left off in the last code list.</p>
        <p>If the stack takes up more space than it was allocated, a "stack overflow" error is generated.</p>

    <h2>Callbacks & Higher Order Functions </h2>

      <h3>Callbacks</h3>

        <p>In JavaScript, a callback is a function that is passed as an argument to another function and is executed when the receiving function completes its task. In other words, when the receiving function is done with its task, it calls the callback function to continue the execution of the program.</p>
        <p>Here’s an example to help illustrate the concept:</p>


        <pre>
        <code class="language-javascript">
        <span class="hljs-keyword">function</span> <span class="hljs-title-function_">greeting</span> (<span class="hljs-params">name</span>) {<span class="hljs-title-function_">
            alert</span> (<span class="hljs-string">'Hello '</span> + name);
        }
        
        <span class="hljs-keyword">function</span> <span class="hljs-title-function_">processUserInput</span>(<span class="hljs-params">callback</span>) {
        <span class="hljs-keyword">     let</span> name = <span class="hljs-title-function_">prompt</span> (<span class="hljs-string">'Please enter your name.'</span>);
        <span class="hljs-title-function_">     callback</span>(name);
        }
        
        <span class="hljs-title-function_">processUserInput</span>(greeting);
        </code>
        </pre>
              
      <h3>higher-order functions</h3>

        <p>In JavaScript, higher-order functions are functions that receive another function as an argument or that return a new function or both. They are only possible because of the First-class function. Higher-order functions can be used in JavaScript in the following ways:</p>
        <ol>
            <li>Store them as variables</li>
            <li>Use them in arrays</li>
            <li>Assign them as object properties (methods)</li>
            <li>Pass them as arguments</li><li>Return them from other functions</li>
        </ol>
        <p>The three most used higher order functions in JavaScript are <code class="tooltip-target">.filter()</code>, <code class="tooltip-target">.map()</code>, and <code class="tooltip-target">.reduce()</code></p>


                <p>A higher-order function is a function that either takes one or more functions as arguments, or returns a 
                function as its result. Higher-order functions are possible because of the first-class functions in JavaScript.</p>
                
                <p>For example, you can pass a function as an argument to another function like this:</p>
           
        <pre>
        <code class="language-javascript"> 
        <span class="hljs-keyword">function</span> <span class="hljs-title-function_"> sayHello</span> <span class="hljs-params">(name) {</span>
            <span class="hljs-comment">  console.</span><span class="hljs-title-function_">log</span> <span class="hljs-params">(</span><span class="hljs-title-function_">`Hello ${name}!`</span><span class="hljs-params">);</span>
        <span class="hljs-params">}</span>

        <span class="hljs-keyword">function </span><span class="hljs-title-function_"> callFunction</span><span class="hljs-params"> (func) {</span>
            <span class="hljs-title-function_">  func</span><span class="hljs-params"> (</span><span class="hljs-title-function_">"John"</span><span class="hljs-params">);</span>
        <span class="hljs-params">}</span>

        <span class="hljs-title-function_">callFunction</span><span class="hljs-params">(sayHello); </span><span class="hljs-comment"> // Hello John!</span>
        </code>
        </pre>

        <p>In this example, 
        <code class="tooltip-target">callFunction()</code>
        is a higher-order function because it takes a function as an argument.</p>

        <p>The difference between
        <code class="tooltip-target">.filter() </code>
        and, 
        <code class="tooltip-target">.map() </code>
        is that
        <code class="tooltip-target"> .filter()</code>
        returns an array of elements that pass a certain condition while 
        .map() 
        returns an array of the same length as the original array but with each element transformed based on the function provided.</p>

        For example, if you have an array of numbers 
        <code class="tooltip-target">[1, 2, 3, 4]</code>
        , and you want to filter out all the even numbers, you can use 
        <code class="tooltip-target">.filter() </code>
        like this:

        <pre>
        <code class="language-javascript">
        <span class="hljs-keyword">const</span><span class="hljs-params"> numbers = [1, 2, 3, 4];</span>
        <span class="hljs-keyword">const</span><span class="hljs-params"> oddNumbers = numbers.</span><span class="hljs-title-function_">filter</span><span class="hljs-params">(number => number % 2 !== 0);</span>
        <span class="hljs-comment">console.</span><span class="hljs-title-function_">log</span><span class="hljs-params">(oddNumbers);</span><span class="hljs-comment"> // [1, 3]</span>
        </code>
        </pre>

        <p>If you want to double each number in the array, you can use
        <code class="tooltip-target">.map() </code>like this:</p>

        <pre>
        <code class="language-javascript"></span>
        <span class="hljs-keyword">const</span><span class="hljs-params"> numbers = [1, 2, 3, 4];</span>
        <span class="hljs-keyword">const </span><span class="hljs-params">doubledNumbers = numbers.</span><span class="hljs-title-function_">map</span><span class="hljs-params">(number => number * 2);</span>
        <span class="hljs-comment">console.</span><span class="hljs-title-function_">log</span><span class="hljs-params">(doubledNumbers); </span><span class="hljs-comment"> // [2, 4, 6, 8]</span>
        </code>
        </pre>

        <p>The difference between 
        <code class="tooltip-target">.map()</code>
         and 
        <code class="tooltip-target">.reduce() </code>
        is that 
        <code class="tooltip-target">.map() </code>
        returns an array of the same length as the original array but with each element transformed based on the function provided while 
        <code class="tooltip-target">.reduce() </code>
        returns a single value that is the result of applying the function to each element of the array.</p>

        <p>For example, if you have an array of numbers 
        <code class="tooltip-target">[1, 2, 3, 4], </code>
        and you want to sum them up using 
        <code class="tooltip-target">.reduce()</code>
        , you can do it like this:</p>

        <pre>
        <code class="language-javascript">
        <span class="hljs-keyword">const </span><span class="hljs-params">numbers = [1, 2, 3, 4];</span>
        <span class="hljs-keyword">const </span><span class="hljs-params">sum = numbers.</span><span class="hljs-title-function_">reduce</span><span class="hljs-params">((accumulator, currentValue) => accumulator + currentValue);</span>
        <span class="hljs-comment">console.</span><span class="hljs-title-function_">log</span><span class="hljs-params">(sum); </span><span class="hljs-comment"> // 10</span>
        </code>
        </pre>

        <p>If you want to double each number in the array using 
        <code class="tooltip-target"> .map()</code>
        , you can do it like this:</p>

        <pre>
        <code class="language-javascript"></span>
        <span class="hljs-keyword">const</span><span class="hljs-params"> numbers = [1, 2, 3, 4];</span>
        <span class="hljs-keyword">const </span><span class="hljs-params">doubledNumbers = numbers.</span><span class="hljs-title-function_">map</span><span class="hljs-params">(number => number * 2);</span>
        <span class="hljs-comment">console.</span><span class="hljs-title-function_">log</span><span class="hljs-params">(doubledNumbers); </span><span class="hljs-comment"> // [2, 4, 6, 8]</span>
        </code>
        </pre>


</div>
